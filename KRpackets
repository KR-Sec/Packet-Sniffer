import tkinter as tk
from tkinter import ttk, filedialog
import scapy.all as scapy
from cryptography.fernet import Fernet
import datetime
import json
import requests
import threading
import time
import queue
import psutil

class PacketTracerGUI:
    def __init__(self, master):
        self.master = master
        master.title("Secure Packet Tracer")

        # Generate a new encryption key
        self.encryption_key = Fernet.generate_key()

        # Create the main frame
        self.main_frame = ttk.Frame(master)
        self.main_frame.pack(padx=20, pady=20)

        # Create the interface selection dropdown
        self.interface_label = ttk.Label(self.main_frame, text="Network Interface:")
        self.interface_label.grid(row=0, column=0, padx=10, pady=10, sticky="e")

        self.interface_var = tk.StringVar()
        self.interface_dropdown = ttk.Combobox(self.main_frame, textvariable=self.interface_var)
        self.interface_dropdown["values"] = self.get_network_interfaces()
        self.interface_dropdown.grid(row=0, column=1, padx=10, pady=10)

        # Create the IP address entry
        self.ip_label = ttk.Label(self.main_frame, text="Target IP Address:")
        self.ip_label.grid(row=1, column=0, padx=10, pady=10, sticky="e")

        self.ip_var = tk.StringVar()
        self.ip_entry = ttk.Entry(self.main_frame, textvariable=self.ip_var)
        self.ip_entry.grid(row=1, column=1, padx=10, pady=10)

        # Create the port entry
        self.port_label = ttk.Label(self.main_frame, text="Port:")
        self.port_label.grid(row=2, column=0, padx=10, pady=10, sticky="e")

        self.port_var = tk.StringVar()
        self.port_entry = ttk.Entry(self.main_frame, textvariable=self.port_var)
        self.port_entry.grid(row=2, column=1, padx=10, pady=10)

        # Create the connection type dropdown
        self.conn_type_label = ttk.Label(self.main_frame, text="Connection Type:")
        self.conn_type_label.grid(row=3, column=0, padx=10, pady=10, sticky="e")

        self.conn_type_var = tk.StringVar()
        self.conn_type_dropdown = ttk.Combobox(self.main_frame, textvariable=self.conn_type_var)
        self.conn_type_dropdown["values"] = ["TCP", "UDP"]
        self.conn_type_dropdown.grid(row=3, column=1, padx=10, pady=10)

        # Create the snooping mode checkbox
        self.snooping_var = tk.BooleanVar()
        self.snooping_checkbox = ttk.Checkbutton(self.main_frame, text="Enable Snooping Mode", variable=self.snooping_var, command=self.toggle_snooping_mode)
        self.snooping_checkbox.grid(row=4, column=0, columnspan=2, padx=10, pady=10)

        # Create the "Start Capture" button
        self.start_button = ttk.Button(self.main_frame, text="Start Capture", command=self.start_capture)
        self.start_button.grid(row=5, column=0, padx=10, pady=10)

        # Create the "Stop Capture" button
        self.stop_button = ttk.Button(self.main_frame, text="Stop Capture", command=self.stop_capture)
        self.stop_button.grid(row=5, column=1, padx=10, pady=10)

        # Create the duration entry
        self.duration_label = ttk.Label(self.main_frame, text="Capture Duration (seconds):")
        self.duration_label.grid(row=6, column=0, padx=10, pady=10, sticky="e")

        self.duration_var = tk.StringVar()
        self.duration_entry = ttk.Entry(self.main_frame, textvariable=self.duration_var)
        self.duration_entry.grid(row=6, column=1, padx=10, pady=10)

        # Create the packet display treeview with a scrollbar
        self.packet_tree = ttk.Treeview(self.main_frame, columns=("Timestamp", "Source IP", "Destination IP", "Protocol", "Status", "Latency"), show="headings")
        self.packet_tree.heading("Timestamp", text="Timestamp")
        self.packet_tree.heading("Source IP", text="Source IP")
        self.packet_tree.heading("Destination IP", text="Destination IP")
        self.packet_tree.heading("Protocol", text="Protocol")
        self.packet_tree.heading("Status", text="Status")
        self.packet_tree.heading("Latency", text="Latency (ms)")
        self.packet_tree.grid(row=7, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")

        self.scrollbar = ttk.Scrollbar(self.main_frame, orient="vertical", command=self.packet_tree.yview)
        self.packet_tree.configure(yscroll=self.scrollbar.set)
        self.scrollbar.grid(row=7, column=2, sticky="ns")

        # Create the packet inspection tab
        self.inspection_tab = ttk.Notebook(self.main_frame)
        self.inspection_tab.grid(row=8, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")

        self.packet_details_frame = ttk.Frame(self.inspection_tab)
        self.packet_details_frame.pack(padx=10, pady=10)

        self.inspection_tab.add(self.packet_details_frame, text="Packet Details")

        # Create the filtering options
        self.filter_frame = ttk.Frame(self.main_frame)
        self.filter_frame.grid(row=9, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")

        self.filter_label = ttk.Label(self.filter_frame, text="Filter:")
        self.filter_label.pack(side=tk.LEFT, padx=10)

        self.filter_entry = ttk.Entry(self.filter_frame)
        self.filter_entry.pack(side=tk.LEFT, padx=10)

        self.filter_button = ttk.Button(self.filter_frame, text="Apply Filter", command=self.apply_filter)
        self.filter_button.pack(side=tk.LEFT, padx=10)

        # Create the reporting and logging options
        self.report_frame = ttk.Frame(self.main_frame)
        self.report_frame.grid(row=10, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")

        self.save_button = ttk.Button(self.report_frame, text="Save Report", command=self.save_report)
        self.save_button.pack(side=tk.LEFT, padx=10)

        self.load_button = ttk.Button(self.report_frame, text="Load Report", command=self.load_report)
        self.load_button.pack(side=tk.LEFT, padx=10)

        # Placeholder for threat intelligence integration
        self.threat_intel_frame = ttk.Frame(self.main_frame)
        self.threat_intel_frame.grid(row=11, column=0, columnspan=2, padx=10, pady=10, sticky="nsew")

        self.capturing = False
        self.packet_queue = queue.Queue()

        # Periodically check the queue for new packets
        self.master.after(100, self.process_packet_queue)

    def get_network_interfaces(self):
        # Use psutil to get the list of available network interfaces with descriptions
        interfaces = psutil.net_if_addrs()
        interface_map = {iface: f"{iface} ({info[0].address})" for iface, info in interfaces.items() if info}
        return [interface_map[iface] for iface in interfaces]

    def start_capture(self):
        self.capturing = True
        duration = int(self.duration_var.get()) if self.duration_var.get() else None
        capture_thread = threading.Thread(target=self.capture_packets, args=(duration,))
        capture_thread.start()

    def stop_capture(self):
        self.capturing = False

    def capture_packets(self, duration):
        start_time = time.time()
        if self.snooping_var.get():
            # Use scapy.sniff for passive packet capturing in snooping mode
            scapy.sniff(prn=self.process_packet, timeout=duration)
        else:
            while self.capturing and (duration is None or time.time() - start_time < duration):
                # Placeholder for packet capture logic
                timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                source_ip = "192.168.1.1"
                destination_ip = self.ip_var.get() if self.ip_var.get() else "8.8.8.8"  # Default to a common IP if not provided
                protocol = self.conn_type_var.get() if self.conn_type_var.get() else "TCP"  # Default to TCP if not provided
                status = "Captured"
                latency = self.calculate_latency(destination_ip)
                packet = {"timestamp": timestamp, "source_ip": source_ip, "destination_ip": destination_ip, "protocol": protocol, "status": status, "latency": latency}
                self.packet_queue.put(packet)
                time.sleep(1)  # Simulate packet capture delay

    def process_packet(self, packet):
        # Process each packet captured by scapy.sniff
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        source_ip = packet[scapy.IP].src if scapy.IP in packet else "Unknown"
        destination_ip = packet[scapy.IP].dst if scapy.IP in packet else "Unknown"
        protocol = packet[scapy.IP].proto if scapy.IP in packet else "Unknown"
        status = "Captured"
        latency = self.calculate_latency(destination_ip)
        packet_info = {"timestamp": timestamp, "source_ip": source_ip, "destination_ip": destination_ip, "protocol": protocol, "status": status, "latency": latency}
        self.packet_queue.put(packet_info)

    def calculate_latency(self, ip):
        # Placeholder for latency calculation logic
        start_time = time.time()
        try:
            requests.get(f"http://{ip}", timeout=1)
            latency = (time.time() - start_time) * 1000  # Convert to milliseconds
        except requests.exceptions.RequestException:
            latency = -1  # Indicate failure
        return latency

    def process_packet_queue(self):
        while not self.packet_queue.empty():
            packet = self.packet_queue.get()
            self.packet_tree.insert("", "end", values=(packet["timestamp"], packet["source_ip"], packet["destination_ip"], packet["protocol"], packet["status"], packet["latency"]))
        self.master.after(100, self.process_packet_queue)

    def apply_filter(self):
        # Placeholder method to apply filter
        print("Applying filter...")

    def save_report(self):
        # Placeholder method to save report
        print("Saving report...")

    def load_report(self):
        # Placeholder method to load report
        print("Loading report...")

    def toggle_snooping_mode(self):
        if self.snooping_var.get():
            self.apply_dark_theme()
        else:
            self.apply_light_theme()

    def apply_dark_theme(self):
        style = ttk.Style()
        style.theme_use('clam')
        style.configure('TFrame', background='#2e2e2e')
        style.configure('TLabel', background='#2e2e2e', foreground='#ffffff')
        style.configure('TEntry', fieldbackground='#3e3e3e', foreground='#ffffff')
        style.configure('TCombobox', fieldbackground='#3e3e3e', foreground='#ffffff')
        style.configure('TButton', background='#3e3e3e', foreground='#ffffff')
        style.configure('Treeview', background='#2e2e2e', foreground='#ffffff', fieldbackground='#2e2e2e')
        style.configure('Treeview.Heading', background='#3e3e3e', foreground='#ffffff')

    def apply_light_theme(self):
        style = ttk.Style()
        style.theme_use('default')
        style.configure('TFrame', background='#f0f0f0')
        style.configure('TLabel', background='#f0f0f0', foreground='#000000')
        style.configure('TEntry', fieldbackground='#ffffff', foreground='#000000')
        style.configure('TCombobox', fieldbackground='#ffffff', foreground='#000000')
        style.configure('TButton', background='#ffffff', foreground='#000000')
        style.configure('Treeview', background='#ffffff', foreground='#000000', fieldbackground='#ffffff')
        style.configure('Treeview.Heading', background='#f0f0f0', foreground='#000000')

if __name__ == "__main__":
    root = tk.Tk()
    app = PacketTracerGUI(root)
    root.mainloop()
